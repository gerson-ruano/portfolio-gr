---
import presentation from "@/data/presentation";
import navItemsList from "@/data/navItemsList";
import NavItem from "@/components/shared/NavItem.astro";
import type { NavItemType } from "@/data/navItemsList";
import ThemeIcon from "@/components/ThemeIcon.astro";
---

<header>
  <div class="flex flex-row border-b-2 border-neutral-500">
    <nav class="flex w-full flex-row justify-between">
      <a href="/" class="text-4xl hover:text-blue-500">
        {presentation.name}
      </a>
      <ul
        class="hidden text-lg md:flex md:justify-between md:space-x-4 md:py-2"
      >
        {
          navItemsList.map((item: NavItemType) => (
            <li>
              <NavItem {...item} />
            </li>
          ))
        }
      </ul>
    </nav>
    <ThemeIcon />
    <!--div class="relative flex items-center">
      <button id="translate-button" class="p-2 text-xl hover:text-blue-500">
        🌍
      </button>
      <!-- Google Translate Element -->
      <!--div id="google_translate_element" class="absolute top-10 right-0 hidden"></div>
    </div-->

    <!--div class="relative flex items-center">
      <button id="translate-button" class="p-2 text-xl hover:text-blue-500">
        🌍
      </button>
      <!-- Google Translate Element -->
      <!--div id="google_translate_element" class="absolute top-10 right-0 hidden z-50 bg-white shadow-lg p-4 rounded-lg">
        <!-- Selector de idiomas de Google Translate -->
        <!--div class="mb-2">
          <label class="block text-sm font-medium text-gray-700">Seleccionar idioma:</label>
          <!--select class="goog-te-combo mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
            
          </select>
        </div-->
        
        <!-- Botones de selección rápida de idioma -->
        <!--div class="flex space-x-2 mt-2">
          <button data-lang="en" class="language-quick-select px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">
            English 🇬🇧
          </button>
          <button data-lang="es" class="language-quick-select px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">
            Español 🇪🇸
          </button>
        </div> 
        
        <!-- Botón para restaurar al idioma original -->
        <!--button onclick="resetLanguage()" class="mt-2 w-full px-2 py-1 bg-gray-200 text-gray-800 rounded hover:bg-gray-300">
          Restaurar idioma original
        </button>
      </div>
    </div-->

    <button class="md:hidden" aria-label="menu-icon">
      <svg
        class="block h-4 w-4 fill-current"
        viewBox="0 0 20 20"
        xmlns="http://www.w3.org/2000/svg"
      >
        <title>Mobile menu</title>
        <path d="M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z"></path>
      </svg>
    </button>
  </div>
</header>

<ul
  class="hidden flex-col border-b-2 border-neutral-500 px-2 pb-10 text-lg md:hidden"
  aria-label="menu"
>
  {
    navItemsList.map((item: NavItemType) => (
      <li class="p-2">
        <NavItem {...item} />
      </li>
    ))
  }
</ul>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Función para cargar el script de Google Translate
    function loadGoogleTranslate() {
      return new Promise((resolve, reject) => {
        // Si Google Translate ya está cargado
        if (window.google?.translate) {
          resolve();
          return;
        }
  
        const script = document.createElement("script");
        script.src = "https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit";
        script.async = true;
        script.onload = () => resolve();
        script.onerror = () => reject(new Error('No se pudo cargar Google Translate'));
        document.body.appendChild(script);
      });
    }
  
    // Mantener una referencia al widget de traducción
    let translateWidget = null;
  
    // Inicialización del widget de Google Translate
    window.googleTranslateElementInit = function() {
      if (window.google?.translate) {
        translateWidget = new google.translate.TranslateElement(
          {
            pageLanguage: "es", // Idioma original
            includedLanguages: "en,es", // Solo español e inglés
            layout: google.translate.TranslateElement.InlineLayout.SIMPLE,
            autoDisplay: false
          },
          "google_translate_element"
        );
      }
    };
  
    // Función para cambiar el idioma
    function changeLanguage(langCode) {
      const translateSelect = document.querySelector('.goog-te-combo');
      if (translateSelect) {
        translateSelect.value = langCode;
        translateSelect.dispatchEvent(new Event('change'));
      }
    }
  
    // Función para restaurar el idioma original
    function resetLanguage() {
      changeLanguage('es');
      const translateElement = document.getElementById("google_translate_element");
      translateElement?.classList.add('hidden');
    }
  
    // Inicialización de la funcionalidad de traducción
    async function initTranslation() {
      try {
        await loadGoogleTranslate();
  
        const translateButton = document.getElementById("translate-button");
        const translateElement = document.getElementById("google_translate_element");
  
        // Función para reiniciar el widget de traducción
        function resetTranslateWidget() {
          if (translateWidget) {
            translateWidget.dispose();
          }
          
          // Limpiar el contenedor
          const container = document.getElementById("google_translate_element");
          if (container) {
            container.innerHTML = '';
          }
  
          // Reiniciar el widget
          window.googleTranslateElementInit();
        }
  
        // Toggle de menú de traducción
        if (translateButton && translateElement) {
          translateButton.addEventListener("click", () => {
            translateElement.classList.toggle("hidden");
            
            // Si se muestra, reiniciar el widget para asegurar su funcionamiento
            if (!translateElement.classList.contains('hidden')) {
              resetTranslateWidget();
            }
          });
        }
  
        // Botones de selección rápida de idioma
        const languageButtons = document.querySelectorAll('.language-quick-select');
        languageButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            const langCode = e.target.dataset.lang;
            if (langCode) {
              changeLanguage(langCode);
              translateElement?.classList.add('hidden');
            }
          });
        });
  
        // Botón de restaurar idioma
        const resetButton = document.querySelector('button[onclick="resetLanguage()"]');
        resetButton?.addEventListener('click', () => {
          resetLanguage();
          resetTranslateWidget();
        });
  
      } catch (error) {
        console.error("Error inicializando traducción:", error);
      }
    }
  
    // Inicializar traducción
    initTranslation();
  });
  </script>
